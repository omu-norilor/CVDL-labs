> e:\uni\invatare adanca\lab5\cod_curat.py(319)test_prediction()
-> plt.imshow(outputs[j].cpu().permute(1, 2, 0).numpy().astype(np.uint8))
tensor([[[-1.4163e+18, -1.4163e+18, -1.4163e+18,  ..., -1.3255e+18,
          -1.3255e+18, -1.3255e+18],
         [-1.4163e+18, -1.4163e+18, -1.4163e+18,  ..., -1.3255e+18,
          -1.3255e+18, -1.3255e+18],
         [-1.4163e+18, -1.4163e+18, -1.4163e+18,  ..., -1.3255e+18,
          -1.3255e+18, -1.3255e+18],
         ...,
         [-1.3765e+18, -1.3765e+18, -1.3765e+18,  ..., -1.2617e+18,
          -1.2617e+18, -1.2617e+18],
         [-1.3765e+18, -1.3765e+18, -1.3765e+18,  ..., -1.2617e+18,
          -1.2617e+18, -1.2617e+18],
         [-1.3765e+18, -1.3765e+18, -1.3765e+18,  ..., -1.2617e+18,
          -1.2617e+18, -1.2617e+18]],
        [[-1.4863e+18, -1.4863e+18, -1.4863e+18,  ..., -1.4027e+18,
          -1.4027e+18, -1.4027e+18],
         [-1.4863e+18, -1.4863e+18, -1.4863e+18,  ..., -1.4027e+18,
          -1.4027e+18, -1.4027e+18],
         [-1.4863e+18, -1.4863e+18, -1.4863e+18,  ..., -1.4027e+18,
          -1.4027e+18, -1.4027e+18],
         ...,
         [-1.4477e+18, -1.4477e+18, -1.4477e+18,  ..., -1.3317e+18,
          -1.3317e+18, -1.3317e+18],
         [-1.4477e+18, -1.4477e+18, -1.4477e+18,  ..., -1.3317e+18,
          -1.3317e+18, -1.3317e+18],
         [-1.4477e+18, -1.4477e+18, -1.4477e+18,  ..., -1.3317e+18,
          -1.3317e+18, -1.3317e+18]],
        [[-3.8345e+17, -3.8345e+17, -3.8345e+17,  ..., -3.7413e+17,
          -3.7413e+17, -3.7413e+17],
         [-3.8345e+17, -3.8345e+17, -3.8345e+17,  ..., -3.7413e+17,
          -3.7413e+17, -3.7413e+17],
         [-3.8345e+17, -3.8345e+17, -3.8345e+17,  ..., -3.7413e+17,
          -3.7413e+17, -3.7413e+17],
         ...,
         [-3.7733e+17, -3.7733e+17, -3.7733e+17,  ..., -3.6375e+17,
          -3.6375e+17, -3.6375e+17],
         [-3.7733e+17, -3.7733e+17, -3.7733e+17,  ..., -3.6375e+17,
          -3.6375e+17, -3.6375e+17],
         [-3.7733e+17, -3.7733e+17, -3.7733e+17,  ..., -3.6375e+17,
          -3.6375e+17, -3.6375e+17]]], device='cuda:0')
tensor([[[2, 2, 2,  ..., 2, 2, 2],
         [2, 2, 2,  ..., 2, 2, 2],
         [2, 2, 2,  ..., 2, 2, 2],
         ...,
         [2, 2, 2,  ..., 2, 2, 2],
         [2, 2, 2,  ..., 2, 2, 2],
         [2, 2, 2,  ..., 2, 2, 2]],
        [[2, 2, 2,  ..., 2, 2, 2],
         [2, 2, 2,  ..., 2, 2, 2],
         [2, 2, 2,  ..., 2, 2, 2],
         ...,
         [2, 2, 2,  ..., 2, 2, 2],
         [2, 2, 2,  ..., 2, 2, 2],
         [2, 2, 2,  ..., 2, 2, 2]],
        [[2, 2, 2,  ..., 2, 2, 2],
         [2, 2, 2,  ..., 2, 2, 2],
         [2, 2, 2,  ..., 2, 2, 2],
         ...,
         [2, 2, 2,  ..., 2, 2, 2],
         [2, 2, 2,  ..., 2, 2, 2],
         [2, 2, 2,  ..., 2, 2, 2]],
        ...,
        [[2, 2, 2,  ..., 2, 2, 2],
         [2, 2, 2,  ..., 2, 2, 2],
         [2, 2, 2,  ..., 2, 2, 2],
         ...,
         [2, 2, 2,  ..., 2, 2, 2],
         [2, 2, 2,  ..., 2, 2, 2],
         [2, 2, 2,  ..., 2, 2, 2]],
        [[2, 2, 2,  ..., 2, 2, 2],
         [2, 2, 2,  ..., 2, 2, 2],
         [2, 2, 2,  ..., 2, 2, 2],
         ...,
         [2, 2, 2,  ..., 2, 2, 2],
         [2, 2, 2,  ..., 2, 2, 2],
         [2, 2, 2,  ..., 2, 2, 2]],
        [[2, 2, 2,  ..., 2, 2, 2],
         [2, 2, 2,  ..., 2, 2, 2],
         [2, 2, 2,  ..., 2, 2, 2],
         ...,
         [2, 2, 2,  ..., 2, 2, 2],
         [2, 2, 2,  ..., 2, 2, 2],
         [2, 2, 2,  ..., 2, 2, 2]]], device='cuda:0')
tensor([[2, 2, 2,  ..., 2, 2, 2],
        [2, 2, 2,  ..., 2, 2, 2],
        [2, 2, 2,  ..., 2, 2, 2],
        ...,
        [2, 2, 2,  ..., 2, 2, 2],
        [2, 2, 2,  ..., 2, 2, 2],
        [2, 2, 2,  ..., 2, 2, 2]], device='cuda:0')
tensor([[2, 2, 2,  ..., 2, 2, 2],
        [2, 2, 2,  ..., 2, 2, 2],
        [2, 2, 2,  ..., 2, 2, 2],
        ...,
        [2, 2, 2,  ..., 2, 2, 2],
        [2, 2, 2,  ..., 2, 2, 2],
        [2, 2, 2,  ..., 2, 2, 2]], device='cuda:0')
torch.Size([8, 250, 250])
torch.Size([8, 250, 250])
torch.Size([3, 250, 250])
tensor([[[3, 3, 3,  ..., 3, 3, 3],
         [3, 3, 3,  ..., 3, 3, 3],
         [3, 3, 3,  ..., 3, 3, 3],
         ...,
         [3, 3, 3,  ..., 4, 4, 4],
         [3, 3, 3,  ..., 4, 4, 4],
         [3, 3, 3,  ..., 4, 4, 4]],
        [[3, 3, 3,  ..., 3, 3, 3],
         [3, 3, 3,  ..., 3, 3, 3],
         [3, 3, 3,  ..., 3, 3, 3],
         ...,
         [3, 3, 3,  ..., 4, 4, 4],
         [3, 3, 3,  ..., 4, 4, 4],
         [3, 3, 3,  ..., 4, 4, 4]],
        [[3, 3, 3,  ..., 3, 3, 3],
         [3, 3, 3,  ..., 3, 3, 3],
         [3, 3, 3,  ..., 3, 3, 3],
         ...,
         [3, 3, 3,  ..., 4, 4, 4],
         [3, 3, 3,  ..., 4, 4, 4],
         [3, 3, 3,  ..., 4, 4, 4]]], device='cuda:0')
tensor([1, 3, 4], device='cuda:0')
tensor([[[3, 3, 3,  ..., 3, 3, 3],
         [3, 3, 3,  ..., 3, 3, 3],
         [3, 3, 3,  ..., 3, 3, 3],
         ...,
         [3, 3, 3,  ..., 4, 4, 4],
         [3, 3, 3,  ..., 4, 4, 4],
         [3, 3, 3,  ..., 4, 4, 4]],
        [[3, 3, 3,  ..., 3, 3, 3],
         [3, 3, 3,  ..., 3, 3, 3],
         [3, 3, 3,  ..., 3, 3, 3],
         ...,
         [3, 3, 3,  ..., 4, 4, 4],
         [3, 3, 3,  ..., 4, 4, 4],
         [3, 3, 3,  ..., 4, 4, 4]],
        [[3, 3, 3,  ..., 3, 3, 3],
         [3, 3, 3,  ..., 3, 3, 3],
         [3, 3, 3,  ..., 3, 3, 3],
         ...,
         [3, 3, 3,  ..., 4, 4, 4],
         [3, 3, 3,  ..., 4, 4, 4],
         [3, 3, 3,  ..., 4, 4, 4]]], device='cuda:0')
tensor([[[231, 231, 231,  ..., 241, 241, 241],
         [231, 231, 231,  ..., 241, 241, 241],
         [231, 231, 231,  ..., 241, 241, 241]],
        [[  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],
        [[  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],
        ...,
        [[241, 241, 241,  ..., 241, 241, 241],
         [241, 241, 241,  ..., 241, 241, 241],
         [241, 241, 241,  ..., 241, 241, 241]],
        [[  0,   0,   0,  ..., 241, 241, 241],
         [  0,   0,   0,  ..., 241, 241, 241],
         [  0,   0,   0,  ..., 241, 241, 241]],
        [[  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]], device='cuda:0')
tensor([  0, 231, 241], device='cuda:0')
tensor([2], device='cuda:0')
torch.Size([8, 3, 250, 250])
tensor([  0, 231, 241], device='cuda:0')
Traceback (most recent call last):
  File "e:\uni\Invatare ADANCA\lab5\cod_curat.py", line 343, in <module>
    dataloader = torch.utils.data.DataLoader(dataset, batch_size=8, shuffle=True, num_workers=0)
  File "e:\uni\Invatare ADANCA\lab5\cod_curat.py", line 319, in test_prediction
    # send the input to the device
  File "e:\uni\Invatare ADANCA\lab5\cod_curat.py", line 319, in test_prediction
    # send the input to the device
  File "C:\Users\byefu\AppData\Local\Programs\Python\Python310\lib\bdb.py", line 90, in trace_dispatch
    return self.dispatch_line(frame)
  File "C:\Users\byefu\AppData\Local\Programs\Python\Python310\lib\bdb.py", line 115, in dispatch_line
    if self.quitting: raise BdbQuit
bdb.BdbQuit